// +build production
// Code generated by go-bindata.
// sources:
// templates/index.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xc1\x4e\xc3\x30\x0c\xbd\xf3\x15\xa6\x54\x6a\xab\x8d\x58\x15\x37\x96\xf5\x02\x9c\xe1\xc0\x85\x63\x96\x04\x9a\x2d\x6d\x4a\x93\x0e\x26\xc4\xbf\xa3\x2e\xd9\xda\x8e\x49\x3b\xd5\x76\xde\x7b\xf5\xb3\x6c\x7a\xfd\xf8\xfc\xf0\xfa\xf6\xf2\x04\xa5\xab\x74\x71\x45\xfd\x07\x80\x96\x92\x89\x3e\x00\xa0\x4e\x39\x2d\x8b\x86\x31\xbb\x32\xdf\x14\x7d\xea\x9f\x2c\x6f\x55\xe3\xc0\xb6\x7c\x19\x95\xce\x35\xf6\x1e\x91\x1b\x21\xc9\xfa\xb3\x93\xed\x8e\x70\x53\xa1\x0f\x6f\xef\x48\x4e\x72\x52\xa9\x9a\xac\x6d\x54\x50\xf4\xd4\x89\x8e\x4f\x00\xe2\x54\x18\xde\x55\xb2\x76\x19\x69\x25\x13\xbb\xf4\xbd\xab\xb9\x53\xa6\x4e\x33\xf8\x09\x20\x80\x98\x7c\x48\x97\x46\xc8\x1a\x85\x5f\xa6\xdd\xd8\x86\x71\x69\xa3\x39\x1c\xd1\x82\x39\x36\x66\x00\x6c\x59\x0b\x1a\x96\x10\xa7\xc9\xcd\xc0\x49\xb2\xc5\x08\x13\x13\xc9\x78\xb9\x27\x93\x01\x33\x92\xdd\xcc\x61\x3b\x95\x05\xd0\x84\x35\x8d\xac\x45\x1a\xa7\x09\xd5\xaa\x48\x60\x06\x5b\xa2\x04\xcc\x20\xa1\xd8\x17\xb2\xc9\x4f\x42\x2b\xca\x3a\xdf\x0d\x35\xba\xa0\x68\x74\x91\x64\x13\xd4\x79\x93\x18\x0d\xf2\x11\x3a\x66\x37\x17\x7c\x9f\xfa\xda\x53\x2e\x58\x3a\x34\xd9\x63\x43\x93\xe7\x8d\x2d\xfe\xd1\x7a\x5f\x87\x81\xf4\xf4\xec\x04\xf1\x3b\x2d\x9c\xa4\xc7\x59\xf6\x32\x13\xf5\x11\xf0\x18\x86\x60\xbc\x51\x14\x0f\xeb\x4b\x57\x46\xec\xc2\x92\x95\x79\x31\x4c\x90\x62\x99\x87\x7a\xa7\x41\x89\x65\x34\x5a\xa1\xf0\x80\x9d\xbf\x05\xf4\x22\x14\xfd\x75\xfc\x05\x00\x00\xff\xff\xa5\xd0\x26\xd5\x35\x03\x00\x00")

func templatesIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTmpl,
		"templates/index.tmpl",
	)
}

func templatesIndexTmpl() (*asset, error) {
	bytes, err := templatesIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tmpl", size: 821, mode: os.FileMode(420), modTime: time.Unix(1487891092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tmpl": templatesIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{templatesIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

